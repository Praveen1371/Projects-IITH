# -*- coding: utf-8 -*-
"""Praveen_honors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zM4q2F4u6kXUY8lB8tjAh3dBTt7PQ2PL
"""

# import torch
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit


def to_be_fit(x, D):
    lam = 6.5e-7
    z = 0.34
    return 1 - (2 * D / np.sqrt(lam * z)) * np.cos(np.pi * x ** 2 / (lam * z) - np.pi / 4) * np.sinc(
        D * x / (lam * z)) + (D ** 2 / (lam * z)) * (np.sinc(D * x / (lam * z))) ** 2


df = pd.read_csv(r"C:\Users\chint\IdeaProjects\honors_project_latest\Values_op5.csv")

x = df['Distance_(pixels)'].to_numpy()
x = x * 20e-6  # -194*20e-6 - 0.001 + 0.00095
y = df['Gray_Value'].to_numpy()
y = y / (np.max(y) - np.min(y))
y -= y.mean()
# y += 1

# code for bias
# algo: Identify the minima...then indentify the peak between them.
z = y.copy()
sorted_list = np.sort(z)
id1 = np.argwhere(z == sorted_list[0])
id2 = np.argwhere(z == sorted_list[1])
z = z[id1[0][0]:id2[0][0]]
bias = ((np.argmax(z) + id1) * 20e-6)[0][0]
# bias = bias - 0.0001

x -= bias
plt.plot(x, y, label='Int.profile from Image')
M = curve_fit(to_be_fit, x, y, [0.1e-2], bounds=(0, np.inf))
y_new = to_be_fit(x, M[0][0])
y_new = np.array(y_new)
y_new = y_new / (np.max(y_new) - np.min(y_new))
y_new -= y_new.mean()
print(f'The diameter of the wire is: {M[0][0] * 1000} mm')
plt.plot(x, y_new, label='Fitted curve using anly.eqn')
plt.xlabel('Distance( microns )')
plt.ylabel('Intensity (Normalized)')
plt.title('Fitted curve and the Intensity profile for D = 0.513mm')
plt.legend(loc='lower right')
plt.show()


